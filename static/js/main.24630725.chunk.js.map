{"version":3,"sources":["Constants.js","Container/App.js","serviceWorker.js","reducers.js","index.js"],"names":["BEKRAFTA_SUCCES","BEKRAFTA_FAILED","MINGLA_STATE","WORKLIST_FILLED","WORKLIST_INITIAL_STATE","CHECKVERB","SVARVERB","EMPTY_TESTLIST","FILLED_TESTLIST","Header","React","lazy","Body","App","fallback","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","Login","initialVerbState","SprÃ¥k","Mingla","WorkList","CheckVerb","SvarVerb","presens","preteritum","supinum","int","testList","rootReducer","combineReducers","LoginReducer","action","type","payload","VerbReducer","store","createStore","compose","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.24630725.chunk.js","sourcesContent":["export const BEKRAFTA_SUCCES = 'BEKRAFTA_SUCCES';\n\nexport const BEKRAFTA_FAILED = 'BEKRAFTA_FAILED';\n\nexport const MINGLA_STATE = 'MINGLA_STATE';\n\nexport const WORKLIST_FILLED = 'WORKLIST_FILLED';\n\nexport const WORKLIST_INITIAL_STATE = 'WORKLIST_INITIAL_STATE;';\n\nexport const CHECKVERB = 'CHECKVERB';\n\nexport const SVARVERB = 'SVARVERB';\n\nexport const EMPTY_TESTLIST = 'EMPTY_TESTLIST';\n\nexport const FILLED_TESTLIST = 'FILLED_TESTLIST';","import React, { Component, Suspense } from 'react';\nconst Header = React.lazy(() => import('../Components/Header'));\nconst Body = React.lazy(() => import('../Components/Body'));\n\nclass App extends Component {\n    \n\n\n    render() {\n      return(\n        <div>\n        \t<Suspense fallback={<div>Loading...</div>}>\n            \t<Header/>\n            \t<Body/>\n            </Suspense>\n        </div>\n        )\n    }\n}\n\n\nexport default (App);\n\n//Users/bert/\n//cd Documents/'Zweedse les'/'Rivstart A1+A2'/OregelbundnaVerbformer/react/verbformer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tBEKRAFTA_SUCCES,\n\tBEKRAFTA_FAILED,\n\tMINGLA_STATE,\n\tWORKLIST_INITIAL_STATE,\n\tWORKLIST_FILLED,\n\tCHECKVERB,\n\tSVARVERB,\n\tEMPTY_TESTLIST,\n\tFILLED_TESTLIST, \n\t} from './Constants';\n\nconst initialState = {\n\tLogin: 'check',\n}\n\nexport const LoginReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase BEKRAFTA_SUCCES:\n\t\treturn {\n\t\t\t...state,\n\t\t\tLogin: action.payload,\n\t\t}\n\t\tcase BEKRAFTA_FAILED:\n\t\treturn {\n\t\t\t...state,\n\t\t\tLogin:action.payload,\n\t\t}\n\t\tdefault:\n\t\treturn state;\n\t}\n}\n\nconst initialVerbState = {\n\tSprÃ¥k: \"swe\",\n\tMingla: false,\n\tWorkList:[],\n\tCheckVerb: {},\n\tSvarVerb: \n\t{\n\t\tpresens:\"\",\n\t\tpreteritum:\"\",\n\t\tsupinum:\"\",\n\t},\n\tint: [0],\n\ttestList:[],\n}\n\nexport const VerbReducer = (state = initialVerbState, action) => {\n\tswitch(action.type) {\n\t\tcase MINGLA_STATE:\n\t\treturn {\n\t\t\t...state,\n\t\t\tMingla: action.payload,\n\t\t}\n\t\tcase WORKLIST_FILLED:\n\t\treturn {\n\t\t\t...state,\n\t\t\tWorkList: action.payload.WorkList,\n\t\t\tSprÃ¥k: action.payload.SprÃ¥k,\n\t\t\ttestList: action.payload.testList,\n\t\t}\n\t\tcase WORKLIST_INITIAL_STATE:\n\t\treturn {\n\t\t\t...state,\n\t\t\tSprÃ¥k: \"swe\",\n\t\t\tMingla: false,\n\t\t\tWorkList:[],\n\t\t\tCheckVerb: {},\n\t\t\tSvarVerb: \n\t\t\t{\n\t\t\t\tpresens:\"\",\n\t\t\t\tpreteritum:\"\",\n\t\t\t\tsupinum:\"\",\n\t\t\t},\n\t\t\tint: [0],\n\t\t\ttestList:[],\n\t\t}\n\t\tcase CHECKVERB:\n\t\treturn {\n\t\t\t...state,\n\t\t\tWorkList: action.payload.WorkList,\n\t\t\tCheckVerb: action.payload.CheckVerb,\n\t\t\tint: action.payload.int,\n\t\t}\n\t\tcase SVARVERB:\n\t\treturn {\n\t\t\t...state,\n\t\t\tSvarVerb: action.payload,\n\t\t}\n\t\tcase EMPTY_TESTLIST:\n\t\treturn {\n\t\t\t...state,\n\t\t\ttestList: [],\n\t\t}\n\t\tcase FILLED_TESTLIST:\n\t\treturn {\n\t\t\t...state,\n\t\t\ttestList: action.payload,\n\t\t}\n\t\tdefault:\n\t\treturn state;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {LoginReducer,VerbReducer} from './reducers';\n\nconst rootReducer = combineReducers({LoginReducer,VerbReducer})\nconst store = createStore(rootReducer, compose(applyMiddleware(thunkMiddleware),window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f)) //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App /> \n\t</Provider>,\n\tdocument.getElementById('root')); \n\t\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}