{"version":3,"sources":["actions.js","Components/Test/Table.js"],"names":["bekrafta","log","dispatch","type","BEKRAFTA_SUCCES","payload","gorom","BEKRAFTA_FAILED","setMingla","state","MINGLA_STATE","fillWorkList","min","max","workList","verb","språk","i","push","WORKLIST_FILLED","WorkList","Språk","testList","console","InitialWorkList","WORKLIST_INITIAL_STATE","FillCheckVerb","Mingla","int","CheckVerb","splice","Math","floor","random","length","Object","keys","map","value","CHECKVERB","FillSvarVerb","SvarVerb","document","getElementById","toLowerCase","SVARVERB","check1","a","b","c","d","FillTestList","Verb","nederländska","presens","preteritum","supinum","backgroundColor","correctAnswer","name","FILLED_TESTLIST","ClearTestList","EMPTY_TESTLIST","Table","GörOm","props","Clear","Empty","this","className","style","width","key","presensColor","preteritumColor","supinumColor","id","onClick","Component","connect","VerbReducer"],"mappings":"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","file":"static/js/7.fb3acf17.chunk.js","sourcesContent":["import {\n  BEKRAFTA_SUCCES,\n  BEKRAFTA_FAILED,\n  MINGLA_STATE, \n  WORKLIST_INITIAL_STATE,\n  WORKLIST_FILLED,\n  CHECKVERB, \n  SVARVERB,\n  FILLED_TESTLIST,\n  EMPTY_TESTLIST,\n  } from './Constants';\n\nexport const bekrafta = (log) => (dispatch) => {\n  dispatch({\n    type: BEKRAFTA_SUCCES,\n    payload: log,\n  })\n}\n\nexport const gorom = () => (dispatch) => {\n  dispatch({\n    type: BEKRAFTA_FAILED,\n    payload: 'check',\n  })\n}\n\nexport const setMingla = (state) => (dispatch) => {\n  dispatch({\n    type: MINGLA_STATE,\n    payload: state,\n  })\n}\n\nexport const fillWorkList = (min, max, workList, verb, språk) => (dispatch) => {\n  var i;\n  for (i = min; i < max; i++) {\n      workList.push(verb[i]);\n  }\n  dispatch({\n    type: WORKLIST_FILLED,\n    payload: {WorkList:workList, Språk:språk, testList:workList,},\n    });\n  console.log(workList);\n}\n\nexport const InitialWorkList = () => (dispatch) => {\n  dispatch({type: WORKLIST_INITIAL_STATE});\n  console.log('initial state');\n  \n}\n\nexport const FillCheckVerb = (Mingla, WorkList, int, CheckVerb) => (dispatch) => {\n  if(Mingla){\n    if(int[0]!==0){WorkList.splice(int[0]-1,1)};\n    int[0] = Math.floor(Math.random() * (WorkList.length - 1)) + 1;\n  }\n  else {\n    if(WorkList.length!==0 && int[0]!==0){\n      WorkList.splice(0,1)\n    }\n    else {\n      int[0]=1;\n    }\n  }\n  console.log(WorkList[0]);\n  Object.keys(WorkList[0]).map((value)=> {CheckVerb[value] = WorkList[int[0]-1][value];return(value);});\n  dispatch(\n  {\n    type: CHECKVERB,\n    payload:{WorkList,int,CheckVerb},\n  })\n}\n\nexport const FillSvarVerb = (SvarVerb) => (dispatch) => {\n  Object.keys(SvarVerb).map((value)=> {SvarVerb[value]=document.getElementById(value).value.toLowerCase();return(value);});\n  dispatch({\n    type:SVARVERB,\n    payload: SvarVerb\n    })\n}\n\nconst check1 = (a, b, c, d) => { \n  if (a === b)\n  {\n    return(c);//\"#8bbc33\";\n  }\n  else\n  {\n    return(d);\n  }\n}\n\nexport const FillTestList = (SvarVerb, testList, CheckVerb) => (dispatch) => {\n  const Verb = {\n    nederländska: CheckVerb.nederländska,\n    presens: SvarVerb.presens,\n    preteritum: SvarVerb.preteritum,\n    supinum: SvarVerb.supinum,\n    backgroundColor:{},\n    correctAnswer: {},\n  };\n  Object.keys(SvarVerb).map(value =>{\n    const name=value+'Color';\n    Verb.backgroundColor[name]=check1(SvarVerb[value], CheckVerb[value],'rgb(139, 188, 51)',\"#ff4d4d\");\n    Verb.correctAnswer[value]=check1(SvarVerb[value], CheckVerb[value], '' , `(${CheckVerb[value]})` );\n    return(Verb);\n  });\n  testList.push(Verb);\n  dispatch({\n    type: FILLED_TESTLIST,\n    payload: testList,\n    })\n}\n\n//voorlopig niet gebruikt!\nexport const fillTestList2 = (min, max, testList, workList, verb) => (dispatch) => {\n  var i;\n  for (i = min; i < max; i++) {\n      testList.push(verb[i]);\n  }\n  workList=testList;\n  console.log(workList);\n  //Object.keys(testList).map(value=>{value['backgroundColor']={presensColor:'',preteritumColor:'',supinumColor:'',}});\n  dispatch({\n    type: FILLED_TESTLIST,\n    payload: testList,\n    })\n}\n\n\nexport const ClearTestList = () => (dispatch) => {\n  dispatch({\n    type: EMPTY_TESTLIST,\n  })\n}\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { gorom, InitialWorkList, ClearTestList,} from '../../actions';\n\n\nconst mapStateToProps = state => {\n    return {\n        testList: state.VerbReducer.testList,\n        workList: state.VerbReducer.WorkList,\n    }\n}\n\n\nconst mapsDispatchToProps = (dispatch) => {\n    return {\n    \tClear: () => dispatch(InitialWorkList()),\n    \tgorom: () => dispatch(gorom()),\n    \tEmpty: () => dispatch(ClearTestList()),\n    \t}\n    }\n\nclass Table extends Component {\n\n\tGörOm = () => {\n\tthis.props.gorom();\n\tthis.props.Clear();\n\tthis.props.Empty();\n\t}\n\n\trender() {\n\t\tconst {workList, testList} = this.props;\n\t\treturn(\n\t\t<div className='container'>\n\t\t\t<div className=\"d-flex flex-column\">\n\t\t\t\t<table className='table table-bordered' style={{width:'100%', backgroundColor: 'white',}}>\n  \t\t\t\t\t<thead>\n  \t\t\t\t\t\t<tr style={{backgroundColor: 'brown',}}>\n  \t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t<th>Presens</th>\n\t\t\t\t\t\t\t<th>Preteritum</th> \n\t\t\t\t\t\t\t<th>Supinum</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{workList.length===1 ? testList.map((value, key) =>{return(\n\t\t\t\t\t\t\t<tr key={key}>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: 'brown'}}>{value.nederländska}</td>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: value.backgroundColor.presensColor}}>{value.presens+' '+value.correctAnswer.presens}</td>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: value.backgroundColor.preteritumColor}}>{value.preteritum+' '+value.correctAnswer.preteritum}</td>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: value.backgroundColor.supinumColor}}>{value.supinum+' '+value.correctAnswer.supinum}</td>\n\t\t\t\t\t\t\t</tr>)\n\t\t\t\t\t\t}) : testList.map((value, key) =>{return(\n\t\t\t\t\t\t\t<tr key={key}>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: 'brown'}}>{value.nederländska}</td>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: 'rgb(139, 188, 51)'}}>{value.presens}</td>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: 'rgb(139, 188, 51)'}}>{value.preteritum}</td>\n\t\t\t\t\t\t\t\t<td style={{backgroundColor: 'rgb(139, 188, 51)'}}>{value.supinum}</td>\n\t\t\t\t\t\t\t</tr>)\n\t\t\t\t\t})} \n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<div className=\"d-flex col-sm m-2 justify-content-center\">\n\t\t\t\t<button type=\"button\" id='GorOm' className=\"btn btn-secondary btn-lg m-2\" onClick={this.GörOm}>Gör om</button>\n\t\t\t</div>\n\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default connect(mapStateToProps, mapsDispatchToProps)(Table);"],"sourceRoot":""}